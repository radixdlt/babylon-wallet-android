{
  "openapi": "3.0.1",
  "info": {
    "title": "Babylon Gateway API - RCnet V2",
    "description": "This API is exposed by the Babylon Radix Gateway to enable clients to efficiently query current and historic\nstate on the RadixDLT ledger, and intelligently handle transaction submission.\n\nIt is designed for use by wallets and explorers. For simple use cases, you can typically use the Core API on\na Node. A Gateway is only needed for reading historic snapshots of ledger states or a more robust set-up.\n\nThe Gateway API is implemented by the [Network Gateway](https://github.com/radixdlt/babylon-gateway),\nwhich is configured to read from [full node(s)](https://github.com/radixdlt/babylon-node) to extract\nand index data from the network.\n\nThis document is an API reference documentation, visit [User Guide](https://docs-babylon.radixdlt.com/) to learn more\nabout how to run a Gateway of your own.\n\n## Integration and forward compatibility guarantees\n\nWe give no guarantees that other endpoints will not change before Babylon mainnet launch, although changes are expected to\nbe minimal.\n",
    "license": {
      "name": "The Radix License, Version 1.0",
      "url": "https://www.radixfoundation.org/licenses/license-v1"
    },
    "version": "0.4.0",
    "x-logo": {
      "url": "https://docs-babylon.radixdlt.com/main/_images/radix-logo-banner.png",
      "href": "https://docs-babylon.radixdlt.com"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/status/gateway-status": {
      "post": {
        "tags": [
          "Status"
        ],
        "summary": "Get Gateway Status",
        "description": "Returns the Gateway API version and current ledger state.\n",
        "operationId": "GatewayStatus",
        "responses": {
          "200": {
            "description": "Network Gateway Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayStatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/status/network-configuration": {
      "post": {
        "tags": [
          "Status"
        ],
        "summary": "Get Network Configuration",
        "description": "Returns network identifier, network name and well-known network addresses.\n",
        "operationId": "NetworkConfiguration",
        "responses": {
          "200": {
            "description": "Network Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkConfigurationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/construction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get Construction Metadata",
        "description": "Returns information needed to construct a new transaction including current `epoch` number.\n",
        "operationId": "TransactionConstruction",
        "responses": {
          "200": {
            "description": "Returns information needed to construct transaction.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionConstructionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/preview": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Preview Transaction",
        "description": "Previews transaction against the network.\nThis endpoint is effectively a proxy towards CoreApi's `/v0/transaction/preview` endpoint. See CoreApi's documentation for more details.\n",
        "operationId": "TransactionPreview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionPreviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Preview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPreviewResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/transaction/submit": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Submit Transaction",
        "description": "Submits a signed transaction payload to the network.\n",
        "operationId": "TransactionSubmit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Submission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSubmitResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/transaction/committed-details": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get Committed Transaction Details",
        "description": "Returns the committed details and receipt of the transaction for a given transaction identifier.\nTransaction identifiers which don't correspond to a committed transaction will return a `TransactionNotFoundError`.\n",
        "operationId": "TransactionCommittedDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCommittedDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCommittedDetailsResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/transaction/status": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get Transaction Status",
        "description": "Returns overall transaction status and all of its known payloads based on supplied intent hash.\n",
        "operationId": "TransactionStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStatusResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/stream/transactions": {
      "post": {
        "tags": [
          "Stream"
        ],
        "summary": "Get Transactions Stream",
        "description": "Returns transactions which have been committed to the ledger.\n",
        "operationId": "StreamTransactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamTransactionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transactions (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamTransactionsResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/details": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Entity Details",
        "description": "Returns detailed information for collection of entities. Aggregate resources globally by default.\n",
        "operationId": "StateEntityDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityDetailsResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/page/metadata": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Entity Metadata Page",
        "description": "Returns all the metadata properties associated with a given global entity.\nThe returned response is in a paginated format, ordered by first appearance on the ledger.\n",
        "operationId": "EntityMetadataPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityMetadataPageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Metadata (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityMetadataPageResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/page/fungibles/": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Entity Fungible Resource Totals Page aggregated globally",
        "description": "Returns the total amount of each fungible resource owned by a given global entity.\nResult can be aggregated globally or per vault.\nThe returned response is in a paginated format, ordered by the resource's first appearance on the ledger.\n",
        "operationId": "EntityFungiblesPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityFungiblesPageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Fungibles (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityFungiblesPageResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/page/fungible-vaults/": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get vault page of Entity Fungible resource aggregated per vault",
        "description": "Returns vaults for fungible resource owned by a given global entity.\nThe returned response is in a paginated format, ordered by the resource's first appearance on the ledger.\n",
        "operationId": "EntityFungibleResourceVaultPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityFungibleResourceVaultsPageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Fungibles (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityFungibleResourceVaultsPageResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/page/non-fungibles/": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Entity Non-Fungible Resource Totals Page aggregated globally",
        "description": "Returns the total amount of each non-fungible resource owned by a given global entity.\nResult can be aggregated globally or per vault.\nThe returned response is in a paginated format, ordered by the resource's first appearance on the ledger.\n",
        "operationId": "EntityNonFungiblesPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityNonFungiblesPageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Non-Fungibles (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityNonFungiblesPageResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/page/non-fungible-vaults/": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get vault page of Entity Non Fungible aggregated per vault",
        "description": "Returns vaults for non fungible resource owned by a given global entity.\nThe returned response is in a paginated format, ordered by the resource's first appearance on the ledger.\n",
        "operationId": "EntityNonFungibleResourceVaultPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityNonFungibleResourceVaultsPageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Fungibles (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityNonFungibleResourceVaultsPageResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/entity/page/non-fungible-vault/ids": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Entity Non-Fungible IDs",
        "description": "Returns all non-fungible IDs of a given non-fungible resource owned by a given entity.\nThe returned response is in a paginated format, ordered by the resource's first appearence on the ledger.\n",
        "operationId": "EntityNonFungibleIdsPage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateEntityNonFungibleIdsPageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity Non-Fungible IDs (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateEntityNonFungibleIdsPageResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/non-fungible/ids": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Non-Fungible Collection",
        "description": "Returns the non-fungible IDs of a given non-fungible resource.\nReturned response is in a paginated format, ordered by their first appearance on the ledger.\n",
        "operationId": "NonFungibleIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateNonFungibleIdsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Non-Fungible IDs (paginated)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateNonFungibleIdsResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/non-fungible/data": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Non-Fungible Data",
        "description": "Returns data associated with a given non-fungible ID of a given non-fungible resource.\n",
        "operationId": "NonFungibleData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateNonFungibleDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Non-Fungible ID Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateNonFungibleDataResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/state/validators/list": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Get Validators List",
        "operationId": "StateValidatorsList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateValidatorsListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Validators List",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateValidatorsListResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NetworkId": {
        "maximum": 255,
        "minimum": 0,
        "type": "integer",
        "description": "The logical id of the network",
        "format": "int32",
        "example": "33"
      },
      "NetworkName": {
        "type": "string",
        "description": "The logical name of the network",
        "example": "enkinet"
      },
      "EntityAddress": {
        "type": "string",
        "description": "Bech32m-encoded human readable version of the entity's global address or hex-encoded id."
      },
      "ComponentAddress": {
        "type": "string",
        "description": "Bech32m-encoded human readable version of the component (normal, account, system) global address or hex-encoded id."
      },
      "ResourceAddress": {
        "type": "string",
        "description": "Bech32m-encoded human readable version of the resource (fungible, non-fungible) global address or hex-encoded id."
      },
      "BigDecimal": {
        "type": "string",
        "description": "String-encoded decimal representing the amount of a related fungible resource."
      },
      "NonFungibleId": {
        "type": "string",
        "description": "String-encoded non-fungible ID."
      },
      "HashHexString": {
        "type": "string",
        "description": "Hex-encoded SHA-256 hash."
      },
      "HexString": {
        "type": "string",
        "description": "Hex-encoded binary blob."
      },
      "NotarizedTransactionHexString": {
        "type": "string",
        "description": "Hex-encoded notarized transaction payload which can be submitted."
      },
      "AccessRulesChain": {
        "type": "object",
        "description": "Refer to `#/components/schemas/AccessRules` of CoreApi for more details."
      },
      "LastUpdatedAtStateVersion": {
        "type": "integer",
        "description": "TBD",
        "format": "int64"
      },
      "PublicKeyType": {
        "enum": [
          "EcdsaSecp256k1",
          "EddsaEd25519"
        ],
        "type": "string"
      },
      "PublicKey": {
        "required": [
          "key_type"
        ],
        "type": "object",
        "properties": {
          "key_type": {
            "$ref": "#/components/schemas/PublicKeyType"
          }
        },
        "discriminator": {
          "propertyName": "key_type",
          "mapping": {
            "EcdsaSecp256k1": "#/components/schemas/PublicKeyEcdsaSecp256k1",
            "EddsaEd25519": "#/components/schemas/PublicKeyEddsaEd25519"
          }
        }
      },
      "PublicKeyEcdsaSecp256k1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicKey"
          },
          {
            "required": [
              "key_hex"
            ],
            "type": "object",
            "properties": {
              "key_hex": {
                "maxLength": 66,
                "minLength": 66,
                "type": "string",
                "description": "The hex-encoded compressed ECDSA Secp256k1 public key (33 bytes)"
              }
            }
          }
        ]
      },
      "PublicKeyEddsaEd25519": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicKey"
          },
          {
            "required": [
              "key_hex"
            ],
            "type": "object",
            "properties": {
              "key_hex": {
                "maxLength": 64,
                "minLength": 64,
                "type": "string",
                "description": "The hex-encoded compressed EdDSA Ed25519 public key (32 bytes)"
              }
            }
          }
        ]
      },
      "AtLedgerStateMixin": {
        "type": "object",
        "properties": {
          "at_ledger_state": {
            "$ref": "#/components/schemas/LedgerStateSelector"
          }
        }
      },
      "LedgerStateSelector": {
        "type": "object",
        "properties": {
          "state_version": {
            "type": "integer",
            "description": "If provided, the latest ledger state lower than or equal to the given state version is returned.",
            "format": "int64",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "If provided, the latest ledger state lower than or equal to the given round timestamp is returned.",
            "format": "date-time",
            "nullable": true
          },
          "epoch": {
            "type": "integer",
            "description": "If provided, the ledger state lower than or equal to the given epoch at round 0 is returned.",
            "format": "int64",
            "nullable": true
          },
          "round": {
            "type": "integer",
            "description": "If provided must be accompanied with `epoch`, the ledger state lower than or equal to the given epoch and round is returned.",
            "format": "int64",
            "nullable": true
          }
        },
        "description": "Optional. This allows for a request to be made against a historic state.\nIf a constraint is specified, the Gateway will resolve the request against the ledger state at that time.\nIf not specified, requests will be made with respect to the top of the committed ledger.\n",
        "nullable": true
      },
      "CursorLimitMixin": {
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string",
            "description": "This cursor allows forward pagination, by providing the cursor from the previous request.",
            "nullable": true
          },
          "limit_per_page": {
            "type": "integer",
            "description": "The page size requested.",
            "nullable": true
          }
        }
      },
      "LedgerStateMixin": {
        "required": [
          "ledger_state"
        ],
        "type": "object",
        "properties": {
          "ledger_state": {
            "$ref": "#/components/schemas/LedgerState"
          }
        }
      },
      "ResultSetCursorMixin": {
        "type": "object",
        "properties": {
          "total_count": {
            "type": "integer",
            "description": "Total number of items in underlying collection, fragment of which is available in `items` collection.",
            "format": "int64",
            "nullable": true
          },
          "previous_cursor": {
            "type": "string",
            "description": "If specified, contains a cursor to query previous page of the `items` collection.",
            "nullable": true
          },
          "next_cursor": {
            "type": "string",
            "description": "If specified, contains a cursor to query next page of the `items` collection.",
            "nullable": true
          }
        }
      },
      "LedgerState": {
        "required": [
          "network",
          "state_version",
          "proposer_round_timestamp",
          "epoch",
          "round"
        ],
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/NetworkName"
          },
          "state_version": {
            "type": "integer",
            "description": "The state version of the ledger. Each transaction increments the state version by 1.",
            "format": "int64"
          },
          "proposer_round_timestamp": {
            "type": "string",
            "description": "The proposer round timestamp of the consensus round when this transaction was committed to ledger.\nThis is not guaranteed to be strictly increasing, as it is computed as an average across the validator set.\nIf this is significantly behind the current timestamp, the Network Gateway is likely reporting out-dated\ninformation, or the network has stalled.\n"
          },
          "epoch": {
            "type": "integer",
            "description": "The epoch number of the ledger at this state version.",
            "format": "int64"
          },
          "round": {
            "type": "integer",
            "description": "The consensus round in the epoch that this state version was committed in.",
            "format": "int64"
          }
        },
        "description": "The ledger state against which the response was generated.\nCan be used to detect if the Network Gateway is returning up-to-date information.\n"
      },
      "ResourceAggregationLevel": {
        "enum": [
          "Global",
          "Vault"
        ],
        "type": "string"
      },
      "ScryptoSborValue": {
        "required": [
          "raw_hex",
          "raw_json"
        ],
        "type": "object",
        "properties": {
          "raw_hex": {
            "type": "string"
          },
          "raw_json": {
            "type": "object"
          }
        }
      },
      "EntityMetadataCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityMetadataItem"
                }
              }
            }
          }
        ],
        "description": "Entity metadata collection."
      },
      "EntityMetadataItem": {
        "required": [
          "key",
          "value",
          "last_updated_at_state_version"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Entity metadata key."
          },
          "value": {
            "$ref": "#/components/schemas/EntityMetadataItemValue"
          },
          "last_updated_at_state_version": {
            "$ref": "#/components/schemas/LastUpdatedAtStateVersion"
          }
        },
        "description": "Entity metadata key-value pair."
      },
      "EntityMetadataItemValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScryptoSborValue"
          },
          {
            "type": "object",
            "properties": {
              "as_string": {
                "type": "string"
              },
              "as_string_collection": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "FungibleResourcesCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FungibleResourcesCollectionItem"
                }
              }
            }
          }
        ],
        "description": "Fungible resources collection."
      },
      "FungibleResourcesCollectionItem": {
        "required": [
          "aggregation_level",
          "resource_address"
        ],
        "type": "object",
        "properties": {
          "aggregation_level": {
            "$ref": "#/components/schemas/ResourceAggregationLevel"
          },
          "resource_address": {
            "$ref": "#/components/schemas/ResourceAddress"
          },
          "explicit_metadata": {
            "$ref": "#/components/schemas/EntityMetadataCollection"
          }
        },
        "discriminator": {
          "propertyName": "aggregation_level",
          "mapping": {
            "Global": "#/components/schemas/FungibleResourcesCollectionItemGloballyAggregated",
            "Vault": "#/components/schemas/FungibleResourcesCollectionItemVaultAggregated"
          }
        }
      },
      "FungibleResourcesCollectionItemGloballyAggregated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FungibleResourcesCollectionItem"
          },
          {
            "required": [
              "amount",
              "last_updated_at_state_version"
            ],
            "type": "object",
            "properties": {
              "amount": {
                "$ref": "#/components/schemas/BigDecimal"
              },
              "last_updated_at_state_version": {
                "$ref": "#/components/schemas/LastUpdatedAtStateVersion"
              }
            }
          }
        ]
      },
      "FungibleResourcesCollectionItemVaultAggregated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FungibleResourcesCollectionItem"
          },
          {
            "required": [
              "vaults"
            ],
            "type": "object",
            "properties": {
              "vaults": {
                "$ref": "#/components/schemas/FungibleResourcesCollectionItemVaultAggregatedVault"
              }
            }
          }
        ]
      },
      "FungibleResourcesCollectionItemVaultAggregatedVault": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FungibleResourcesCollectionItemVaultAggregatedVaultItem"
                }
              }
            }
          }
        ]
      },
      "FungibleResourcesCollectionItemVaultAggregatedVaultItem": {
        "required": [
          "vault_address",
          "amount",
          "last_updated_at_state_version"
        ],
        "type": "object",
        "properties": {
          "vault_address": {
            "$ref": "#/components/schemas/EntityAddress"
          },
          "amount": {
            "$ref": "#/components/schemas/BigDecimal"
          },
          "last_updated_at_state_version": {
            "$ref": "#/components/schemas/LastUpdatedAtStateVersion"
          }
        }
      },
      "NonFungibleResourcesCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NonFungibleResourcesCollectionItem"
                }
              }
            }
          }
        ],
        "description": "Non-fungible resources collection."
      },
      "NonFungibleResourcesCollectionItem": {
        "required": [
          "aggregation_level",
          "resource_address"
        ],
        "type": "object",
        "properties": {
          "aggregation_level": {
            "$ref": "#/components/schemas/ResourceAggregationLevel"
          },
          "resource_address": {
            "$ref": "#/components/schemas/ResourceAddress"
          },
          "explicit_metadata": {
            "$ref": "#/components/schemas/EntityMetadataCollection"
          }
        },
        "discriminator": {
          "propertyName": "aggregation_level",
          "mapping": {
            "Global": "#/components/schemas/NonFungibleResourcesCollectionItemGloballyAggregated",
            "Vault": "#/components/schemas/NonFungibleResourcesCollectionItemVaultAggregated"
          }
        }
      },
      "NonFungibleResourcesCollectionItemGloballyAggregated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonFungibleResourcesCollectionItem"
          },
          {
            "required": [
              "amount",
              "last_updated_at_state_version"
            ],
            "type": "object",
            "properties": {
              "amount": {
                "type": "integer",
                "description": "TBA",
                "format": "int64"
              },
              "last_updated_at_state_version": {
                "$ref": "#/components/schemas/LastUpdatedAtStateVersion"
              }
            }
          }
        ]
      },
      "NonFungibleResourcesCollectionItemVaultAggregated": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonFungibleResourcesCollectionItem"
          },
          {
            "required": [
              "vaults"
            ],
            "type": "object",
            "properties": {
              "vaults": {
                "$ref": "#/components/schemas/NonFungibleResourcesCollectionItemVaultAggregatedVault"
              }
            }
          }
        ]
      },
      "NonFungibleResourcesCollectionItemVaultAggregatedVault": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NonFungibleResourcesCollectionItemVaultAggregatedVaultItem"
                }
              }
            }
          }
        ]
      },
      "NonFungibleResourcesCollectionItemVaultAggregatedVaultItem": {
        "required": [
          "vault_address",
          "total_count",
          "last_updated_at_state_version"
        ],
        "type": "object",
        "properties": {
          "vault_address": {
            "$ref": "#/components/schemas/EntityAddress"
          },
          "total_count": {
            "type": "integer",
            "format": "int64"
          },
          "last_updated_at_state_version": {
            "$ref": "#/components/schemas/LastUpdatedAtStateVersion"
          }
        }
      },
      "NonFungibleIdsCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NonFungibleIdsCollectionItem"
                }
              }
            }
          }
        ],
        "description": "Non-fungible resource IDs collection."
      },
      "NonFungibleIdsCollectionItem": {
        "required": [
          "non_fungible_id"
        ],
        "type": "object",
        "properties": {
          "non_fungible_id": {
            "$ref": "#/components/schemas/NonFungibleId"
          }
        }
      },
      "CommittedTransactionInfo": {
        "required": [
          "state_version",
          "transaction_status"
        ],
        "type": "object",
        "properties": {
          "state_version": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "transaction_status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "payload_hash_hex": {
            "$ref": "#/components/schemas/HashHexString"
          },
          "intent_hash_hex": {
            "$ref": "#/components/schemas/HashHexString"
          },
          "fee_paid": {
            "$ref": "#/components/schemas/TokenAmount"
          },
          "confirmed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "error_message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TransactionStatus": {
        "enum": [
          "Unknown",
          "CommittedSuccess",
          "CommittedFailure",
          "Pending",
          "Rejected"
        ],
        "type": "string"
      },
      "TransactionReceipt": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "description": "The status of the transaction."
          },
          "fee_summary": {
            "type": "object",
            "description": "Fees paid, Only present if the `status` is not `Rejected`."
          },
          "state_updates": {
            "type": "object",
            "description": "Transaction state updates (only present if status is Succeeded or Failed)."
          },
          "next_epoch": {
            "type": "object",
            "description": "Information (number and active validator list) about new epoch if occured."
          },
          "items": {
            "type": "object",
            "description": "The manifest line-by-line engine return data (only present if `status` is `Succeeded`)."
          },
          "events": {
            "type": "object",
            "description": "Events emitted by a transaction."
          },
          "error_message": {
            "type": "string",
            "description": "Error message (only present if status is `Failed` or `Rejected`)",
            "nullable": true
          }
        }
      },
      "TokenAmount": {
        "required": [
          "value",
          "token_identifier"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/BigDecimal"
          },
          "address": {
            "$ref": "#/components/schemas/ResourceAddress"
          }
        },
        "description": "Represents a decimal amount of a given resource."
      },
      "NonFungibleIdType": {
        "enum": [
          "String",
          "Integer",
          "Bytes",
          "Uuid"
        ],
        "type": "string"
      },
      "ValidatorCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultSetCursorMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidatorCollectionItem"
                }
              }
            }
          }
        ]
      },
      "ValidatorCollectionItem": {
        "required": [
          "address",
          "metadata",
          "current_stake"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EntityAddress"
          },
          "state": {
            "type": "object",
            "nullable": true
          },
          "current_stake": {
            "$ref": "#/components/schemas/BigDecimal"
          },
          "active_in_epoch": {
            "$ref": "#/components/schemas/ValidatorCollectionItemActiveInEpoch"
          },
          "metadata": {
            "$ref": "#/components/schemas/EntityMetadataCollection"
          }
        }
      },
      "ValidatorCollectionItemActiveInEpoch": {
        "required": [
          "stake",
          "stake_percentage",
          "key"
        ],
        "type": "object",
        "properties": {
          "stake": {
            "$ref": "#/components/schemas/BigDecimal"
          },
          "stake_percentage": {
            "type": "number",
            "format": "double"
          },
          "key": {
            "$ref": "#/components/schemas/PublicKey"
          }
        }
      },
      "NetworkConfigurationResponse": {
        "required": [
          "network_id",
          "network_name",
          "well_known_addresses"
        ],
        "type": "object",
        "properties": {
          "network_id": {
            "$ref": "#/components/schemas/NetworkId"
          },
          "network_name": {
            "$ref": "#/components/schemas/NetworkName"
          },
          "well_known_addresses": {
            "required": [
              "faucet",
              "epoch_manager",
              "clock",
              "ecdsa_secp256k1",
              "eddsa_ed25519",
              "xrd"
            ],
            "type": "object",
            "properties": {
              "faucet": {
                "$ref": "#/components/schemas/ComponentAddress"
              },
              "epoch_manager": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "clock": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "ecdsa_secp256k1": {
                "$ref": "#/components/schemas/ResourceAddress"
              },
              "eddsa_ed25519": {
                "$ref": "#/components/schemas/ResourceAddress"
              },
              "xrd": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        }
      },
      "GatewayStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "release_info"
            ],
            "type": "object",
            "properties": {
              "release_info": {
                "$ref": "#/components/schemas/GatewayInfoResponseReleaseInfo"
              }
            }
          }
        ]
      },
      "GatewayInfoResponseKnownTarget": {
        "required": [
          "state_version"
        ],
        "type": "object",
        "properties": {
          "state_version": {
            "type": "integer",
            "description": "The latest-seen state version of the tip of the network's ledger. If this is significantly ahead of the current ledger state version, the Network Gateway is possibly behind and may be reporting outdated information.\n",
            "format": "int64"
          }
        }
      },
      "GatewayInfoResponseReleaseInfo": {
        "required": [
          "release_version",
          "image_tag",
          "open_api_schema_version"
        ],
        "type": "object",
        "properties": {
          "release_version": {
            "type": "string",
            "description": "The release that is currently deployed to the Gateway API."
          },
          "open_api_schema_version": {
            "type": "string",
            "description": "The Open API Schema version that was used to generate the API models."
          },
          "image_tag": {
            "type": "string",
            "description": "Image tag that is currently deployed to the Gateway API."
          }
        }
      },
      "TransactionConstructionResponse": {
        "allOf": [
          {
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          }
        ]
      },
      "TransactionPreviewRequest": {
        "required": [
          "manifest",
          "start_epoch_inclusive",
          "end_epoch_exclusive",
          "cost_unit_limit",
          "tip_percentage",
          "nonce",
          "signer_public_keys",
          "flags"
        ],
        "type": "object",
        "properties": {
          "manifest": {
            "type": "string",
            "description": "A text-representation of a transaction manifest"
          },
          "blobs_hex": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of hex-encoded blob data (optional)"
          },
          "start_epoch_inclusive": {
            "maximum": 10000000000,
            "minimum": 0,
            "type": "integer",
            "description": "An integer between `0` and `10^10`, marking the epoch at which the transaction starts being valid",
            "format": "int64"
          },
          "end_epoch_exclusive": {
            "maximum": 10000000000,
            "minimum": 0,
            "type": "integer",
            "description": "An integer between `0` and `10^10`, marking the epoch at which the transaction is no longer valid",
            "format": "int64"
          },
          "notary_public_key": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "notary_as_signatory": {
            "type": "boolean",
            "description": "Whether the notary should count as a signatory (optional, default false)"
          },
          "cost_unit_limit": {
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer",
            "description": "An integer between `0` and `2^32 - 1`, giving the maximum number of cost units available for transaction execution",
            "format": "int64"
          },
          "tip_percentage": {
            "maximum": 255,
            "minimum": 0,
            "type": "integer",
            "description": "An integer between `0` and `255`, giving the validator tip as a percentage amount. A value of `1` corresponds to 1% of the fee.",
            "format": "int32"
          },
          "nonce": {
            "type": "string",
            "description": "A decimal-string-encoded integer between `0` and `2^64 - 1`, used to ensure the transaction intent is unique."
          },
          "signer_public_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKey"
            },
            "description": "A list of public keys to be used as transaction signers"
          },
          "flags": {
            "required": [
              "unlimited_loan",
              "assume_all_signature_proofs",
              "permit_duplicate_intent_hash",
              "permit_invalid_header_epoch"
            ],
            "type": "object",
            "properties": {
              "unlimited_loan": {
                "type": "boolean"
              },
              "assume_all_signature_proofs": {
                "type": "boolean"
              },
              "permit_duplicate_intent_hash": {
                "type": "boolean"
              },
              "permit_invalid_header_epoch": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "TransactionPreviewResponse": {
        "required": [
          "encoded_receipt",
          "receipt",
          "resource_changes",
          "logs"
        ],
        "type": "object",
        "properties": {
          "encoded_receipt": {
            "$ref": "#/components/schemas/HexString"
          },
          "receipt": {
            "type": "object"
          },
          "resource_changes": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "logs": {
            "type": "array",
            "items": {
              "required": [
                "level",
                "message"
              ],
              "type": "object",
              "properties": {
                "level": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TransactionSubmitRequest": {
        "required": [
          "notarized_transaction_hex"
        ],
        "type": "object",
        "properties": {
          "notarized_transaction_hex": {
            "$ref": "#/components/schemas/NotarizedTransactionHexString"
          }
        }
      },
      "TransactionSubmitResponse": {
        "required": [
          "duplicate"
        ],
        "type": "object",
        "properties": {
          "duplicate": {
            "type": "boolean",
            "description": "Is true if the transaction is a duplicate of an existing pending transaction."
          }
        }
      },
      "TransactionStatusRequest": {
        "allOf": [
          {
            "required": [
              "intent_hash_hex"
            ],
            "type": "object",
            "properties": {
              "intent_hash_hex": {
                "$ref": "#/components/schemas/HashHexString"
              }
            }
          }
        ],
        "example": {
          "intent_hash_hex": "<transaction-intent-hash>"
        }
      },
      "TransactionStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "status",
              "known_payloads"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/TransactionStatus"
              },
              "known_payloads": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionStatusResponseKnownPayloadItem"
                }
              },
              "error_message": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "TransactionStatusResponseKnownPayloadItem": {
        "required": [
          "payload_hash_hex",
          "status"
        ],
        "type": "object",
        "properties": {
          "payload_hash_hex": {
            "$ref": "#/components/schemas/HashHexString"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "error_message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TransactionCommittedDetailsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "required": [
              "intent_hash_hex"
            ],
            "type": "object",
            "properties": {
              "intent_hash_hex": {
                "$ref": "#/components/schemas/HashHexString"
              },
              "opt_ins": {
                "$ref": "#/components/schemas/TransactionCommittedDetailsOptIns"
              }
            }
          }
        ],
        "example": {
          "intent_hash_hex": "<transaction-intent-hash>"
        }
      },
      "TransactionCommittedDetailsOptIns": {
        "type": "object",
        "properties": {
          "raw_hex": {
            "type": "boolean"
          },
          "receipt_state_changes": {
            "type": "boolean"
          },
          "receipt_fee_summary": {
            "type": "boolean"
          },
          "receipt_events": {
            "type": "boolean"
          }
        }
      },
      "TransactionCommittedDetailsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "transaction",
              "details"
            ],
            "type": "object",
            "properties": {
              "transaction": {
                "$ref": "#/components/schemas/CommittedTransactionInfo"
              },
              "details": {
                "$ref": "#/components/schemas/TransactionCommittedDetailsResponseDetails"
              }
            }
          }
        ]
      },
      "TransactionCommittedDetailsResponseDetails": {
        "required": [
          "receipt",
          "referenced_global_entities"
        ],
        "type": "object",
        "properties": {
          "raw_hex": {
            "$ref": "#/components/schemas/HexString"
          },
          "receipt": {
            "$ref": "#/components/schemas/TransactionReceipt"
          },
          "referenced_global_entities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message_hex": {
            "$ref": "#/components/schemas/HexString"
          }
        }
      },
      "StreamTransactionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "type": "object",
            "properties": {
              "from_ledger_state": {
                "$ref": "#/components/schemas/LedgerStateSelector"
              },
              "kind_filter": {
                "enum": [
                  "User",
                  "EpochChange",
                  "All"
                ],
                "type": "string",
                "description": "Limit returned transactions by their kind. Defaults to `user`."
              },
              "order": {
                "enum": [
                  "Asc",
                  "Desc"
                ],
                "type": "string",
                "description": "Configures the order of returned result set. Defaults to `desc`."
              }
            }
          }
        ],
        "example": {
          "limit_per_page": 5
        }
      },
      "StreamTransactionsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResultSetCursorMixin"
              },
              {
                "required": [
                  "items"
                ],
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CommittedTransactionInfo"
                    },
                    "description": "The page of user transactions."
                  }
                }
              }
            ]
          }
        ]
      },
      "StateEntityDetailsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "required": [
              "addresses"
            ],
            "type": "object",
            "properties": {
              "opt_ins": {
                "$ref": "#/components/schemas/StateEntityDetailsOptIns"
              },
              "addresses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityAddress"
                }
              },
              "aggregation_level": {
                "$ref": "#/components/schemas/ResourceAggregationLevel"
              }
            }
          }
        ],
        "example": {
          "addresses": [
            "resource_tdx_21_1qyqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq4jz0v"
          ]
        }
      },
      "StateEntityDetailsOptIns": {
        "type": "object",
        "properties": {
          "ancestor_identities": {
            "type": "boolean"
          },
          "component_royalty_vault_balance": {
            "type": "boolean"
          },
          "package_royalty_vault_balance": {
            "type": "boolean"
          },
          "explicit_metadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StateEntityDetailsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StateEntityDetailsResponseItem"
                }
              }
            }
          }
        ]
      },
      "StateEntityDetailsResponseItem": {
        "required": [
          "address",
          "metadata"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EntityAddress"
          },
          "fungible_resources": {
            "$ref": "#/components/schemas/FungibleResourcesCollection"
          },
          "non_fungible_resources": {
            "$ref": "#/components/schemas/NonFungibleResourcesCollection"
          },
          "ancestor_identities": {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemAncestorIdentities"
          },
          "metadata": {
            "$ref": "#/components/schemas/EntityMetadataCollection"
          },
          "explicit_metadata": {
            "$ref": "#/components/schemas/EntityMetadataCollection"
          },
          "details": {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          }
        }
      },
      "StateEntityDetailsResponseItemAncestorIdentities": {
        "type": "object",
        "properties": {
          "parent_address": {
            "$ref": "#/components/schemas/EntityAddress"
          },
          "owner_address": {
            "$ref": "#/components/schemas/EntityAddress"
          },
          "global_address": {
            "$ref": "#/components/schemas/EntityAddress"
          }
        }
      },
      "StateEntityDetailsResponseItemDetailsType": {
        "enum": [
          "FungibleResource",
          "NonFungibleResource",
          "FungibleVault",
          "NonFungibleVault",
          "Package",
          "Component"
        ],
        "type": "string"
      },
      "StateEntityDetailsResponseItemDetails": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetailsType"
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "FungibleResource": "#/components/schemas/StateEntityDetailsResponseFungibleResourceDetails",
            "NonFungibleResource": "#/components/schemas/StateEntityDetailsResponseNonFungibleResourceDetails",
            "FungibleVault": "#/components/schemas/StateEntityDetailsResponseFungibleVaultDetails",
            "NonFungibleVault": "#/components/schemas/StateEntityDetailsResponseNonFungibleVaultDetails",
            "Package": "#/components/schemas/StateEntityDetailsResponsePackageDetails",
            "Component": "#/components/schemas/StateEntityDetailsResponseComponentDetails"
          }
        }
      },
      "StateEntityDetailsResponseFungibleResourceDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          },
          {
            "required": [
              "access_rules_chain",
              "vault_access_rules_chain",
              "divisibility"
            ],
            "type": "object",
            "properties": {
              "access_rules_chain": {
                "type": "object"
              },
              "vault_access_rules_chain": {
                "type": "object"
              },
              "divisibility": {
                "minimum": 0,
                "type": "integer"
              }
            }
          }
        ]
      },
      "StateEntityDetailsResponseNonFungibleResourceDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          },
          {
            "required": [
              "access_rules_chain",
              "vault_access_rules_chain",
              "non_fungible_id_type"
            ],
            "type": "object",
            "properties": {
              "access_rules_chain": {
                "type": "object"
              },
              "vault_access_rules_chain": {
                "type": "object"
              },
              "non_fungible_id_type": {
                "$ref": "#/components/schemas/NonFungibleIdType"
              }
            }
          }
        ]
      },
      "StateEntityDetailsResponseFungibleVaultDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          },
          {
            "type": "object"
          }
        ]
      },
      "StateEntityDetailsResponseNonFungibleVaultDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          },
          {
            "type": "object"
          }
        ]
      },
      "StateEntityDetailsResponsePackageDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          },
          {
            "type": "object",
            "properties": {
              "code_hex": {
                "$ref": "#/components/schemas/HexString"
              },
              "royalty_vault_balance": {
                "$ref": "#/components/schemas/BigDecimal"
              }
            }
          }
        ]
      },
      "StateEntityDetailsResponseComponentDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StateEntityDetailsResponseItemDetails"
          },
          {
            "required": [
              "blueprint_name",
              "access_rules_chain"
            ],
            "type": "object",
            "properties": {
              "package_address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "blueprint_name": {
                "type": "string"
              },
              "state": {
                "type": "object"
              },
              "access_rules_chain": {
                "type": "object"
              },
              "royalty_vault_balance": {
                "$ref": "#/components/schemas/BigDecimal"
              }
            }
          }
        ]
      },
      "StateEntityMetadataPageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              }
            }
          }
        ],
        "example": {
          "address": "resource_tdx_21_1qyqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq4jz0v"
        }
      },
      "StateEntityMetadataPageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/EntityMetadataCollection"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              }
            }
          }
        ]
      },
      "StateEntityFungiblesPageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "aggregation_level": {
                "$ref": "#/components/schemas/ResourceAggregationLevel"
              },
              "opt_ins": {
                "$ref": "#/components/schemas/StateEntityFungiblesPageRequestOptIns"
              }
            }
          }
        ],
        "example": {
          "address": "component_tdx_21_1q0kryz5scup945usk39qjc2yjh6l5zsyuh8t7v5pk0ts0dmslu"
        }
      },
      "StateEntityFungiblesPageRequestOptIns": {
        "type": "object",
        "properties": {
          "explicit_metadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StateEntityFungiblesPageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/FungibleResourcesCollection"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              }
            }
          }
        ]
      },
      "StateEntityFungibleResourceVaultsPageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "address",
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ],
        "example": {
          "address": "component_tdx_21_1q0kryz5scup945usk39qjc2yjh6l5zsyuh8t7v5pk0ts0dmslu",
          "resource_address": "<resource_address>"
        }
      },
      "StateEntityFungibleResourceVaultsPageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/FungibleResourcesCollectionItemVaultAggregatedVault"
          },
          {
            "required": [
              "address",
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ]
      },
      "StateEntityNonFungiblesPageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "aggregation_level": {
                "$ref": "#/components/schemas/ResourceAggregationLevel"
              },
              "opt_ins": {
                "$ref": "#/components/schemas/StateEntityNonFungiblesPageRequestOptIns"
              }
            }
          }
        ],
        "example": {
          "address": "component_tdx_21_1q0kryz5scup945usk39qjc2yjh6l5zsyuh8t7v5pk0ts0dmslu"
        }
      },
      "StateEntityNonFungiblesPageRequestOptIns": {
        "type": "object",
        "properties": {
          "explicit_metadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StateEntityNonFungiblesPageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/NonFungibleResourcesCollection"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              }
            }
          }
        ]
      },
      "StateEntityNonFungibleResourceVaultsPageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "address",
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ],
        "example": {
          "address": "component_tdx_21_1q0kryz5scup945usk39qjc2yjh6l5zsyuh8t7v5pk0ts0dmslu",
          "resource_address": "<resource_address>"
        }
      },
      "StateEntityNonFungibleResourceVaultsPageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/NonFungibleResourcesCollectionItemVaultAggregatedVault"
          },
          {
            "required": [
              "address",
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ]
      },
      "StateEntityNonFungibleIdsPageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "address",
              "vault_address",
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "vault_address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ],
        "example": {
          "address": "component_tdx_21_1q0kryz5scup945usk39qjc2yjh6l5zsyuh8t7v5pk0ts0dmslu",
          "resource_address": null,
          "vault_address": null
        }
      },
      "StateEntityNonFungibleIdsPageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/NonFungibleIdsCollection"
          },
          {
            "required": [
              "address",
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              },
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ]
      },
      "StateNonFungibleIdsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "resource_address"
            ],
            "type": "object",
            "properties": {
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              }
            }
          }
        ],
        "example": {
          "resource_address": "<non-fungible-entity-address>"
        }
      },
      "StateNonFungibleIdsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "resource_address",
              "non_fungible_ids"
            ],
            "type": "object",
            "properties": {
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              },
              "non_fungible_ids": {
                "$ref": "#/components/schemas/NonFungibleIdsCollection"
              }
            }
          }
        ]
      },
      "StateNonFungibleDataRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "$ref": "#/components/schemas/CursorLimitMixin"
          },
          {
            "required": [
              "resource_address",
              "non_fungible_ids"
            ],
            "type": "object",
            "properties": {
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              },
              "non_fungible_ids": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NonFungibleId"
                }
              }
            }
          }
        ],
        "example": {
          "resource_address": "<non-fungible-entity-address>",
          "non_fungible_ids": [
            "#1#"
          ]
        }
      },
      "StateNonFungibleDataResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "resource_address",
              "non_fungible_id_type",
              "non_fungible_ids"
            ],
            "type": "object",
            "properties": {
              "resource_address": {
                "$ref": "#/components/schemas/ResourceAddress"
              },
              "non_fungible_id_type": {
                "$ref": "#/components/schemas/NonFungibleIdType"
              },
              "non_fungible_ids": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StateNonFungibleDetailsResponseItem"
                }
              }
            }
          }
        ]
      },
      "StateNonFungibleDetailsResponseItem": {
        "required": [
          "non_fungible_id",
          "data",
          "last_updated_at_state_version"
        ],
        "type": "object",
        "properties": {
          "non_fungible_id": {
            "$ref": "#/components/schemas/NonFungibleId"
          },
          "data": {
            "$ref": "#/components/schemas/ScryptoSborValue"
          },
          "last_updated_at_state_version": {
            "$ref": "#/components/schemas/LastUpdatedAtStateVersion"
          }
        }
      },
      "StateValidatorsListRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AtLedgerStateMixin"
          },
          {
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "description": "This cursor allows forward pagination, by providing the cursor from the previous request.",
                "nullable": true
              }
            }
          }
        ],
        "example": {
          "at_ledger_state": null
        }
      },
      "StateValidatorsListResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LedgerStateMixin"
          },
          {
            "required": [
              "validators"
            ],
            "type": "object",
            "properties": {
              "validators": {
                "$ref": "#/components/schemas/ValidatorCollection"
              }
            }
          }
        ]
      },
      "ErrorResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A human-readable error message."
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the given error type."
          },
          "details": {
            "$ref": "#/components/schemas/GatewayError"
          },
          "trace_id": {
            "type": "string",
            "description": "A unique request identifier to be used when reporting errors, to allow correlation with the Gateway API's error logs."
          }
        }
      },
      "GatewayError": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of error. Each subtype may have its own additional structured fields."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "EntityNotFoundError": "#/components/schemas/EntityNotFoundError",
            "InvalidEntityError": "#/components/schemas/InvalidEntityError",
            "NotSyncedUpError": "#/components/schemas/NotSyncedUpError",
            "InvalidRequestError": "#/components/schemas/InvalidRequestError",
            "InvalidTransactionError": "#/components/schemas/InvalidTransactionError",
            "TransactionNotFoundError": "#/components/schemas/TransactionNotFoundError",
            "InternalServerError": "#/components/schemas/InternalServerError"
          }
        }
      },
      "EntityNotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              }
            }
          }
        ]
      },
      "InvalidEntityError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "required": [
              "address"
            ],
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/EntityAddress"
              }
            }
          }
        ]
      },
      "NotSyncedUpError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "required": [
              "request_type",
              "current_sync_delay_seconds",
              "max_allowed_sync_delay_seconds"
            ],
            "type": "object",
            "properties": {
              "request_type": {
                "type": "string",
                "description": "The request type that triggered this exception."
              },
              "current_sync_delay_seconds": {
                "type": "integer",
                "description": "The current delay between the Gateway DB and the network ledger round timestamp.",
                "format": "int64"
              },
              "max_allowed_sync_delay_seconds": {
                "type": "integer",
                "description": "The maximum allowed delay between the Gateway DB and the network ledger round timestamp for this `request_type`.",
                "format": "int64"
              }
            }
          }
        ]
      },
      "InvalidRequestError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "required": [
              "validation_errors"
            ],
            "type": "object",
            "properties": {
              "validation_errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ValidationErrorsAtPath"
                },
                "description": "One or more validation errors which occurred when validating the request."
              }
            }
          }
        ]
      },
      "InvalidTransactionError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "type": "object"
          }
        ]
      },
      "TransactionNotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "required": [
              "intent_hash_hex"
            ],
            "type": "object",
            "properties": {
              "intent_hash_hex": {
                "$ref": "#/components/schemas/HashHexString"
              }
            }
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayError"
          },
          {
            "required": [
              "exception",
              "cause"
            ],
            "type": "object",
            "properties": {
              "exception": {
                "type": "string",
                "description": "Gives an error type which occurred within the Gateway API when serving the request."
              },
              "cause": {
                "type": "string",
                "description": "Gives a human readable message - likely just a trace ID for reporting the error."
              }
            }
          }
        ]
      },
      "ValidationErrorsAtPath": {
        "required": [
          "path",
          "errors"
        ],
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "Client-originated request error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "SubAPIs",
      "description": "The Gateway API is split into 4 sub APIs:\n- **Status** (`/status/*`) - For status and configuration details for the Gateway / Network.\n- **Transaction** (`/transaction/*`) - For transaction construction, preview, submission, and monitoring the status of an individual transaction.\n- **Stream** (`/transaction/*`) - For reading committed transactions.\n- **State** (`/state/*`, `/entity/*` and `/non-fungible/*`) - For reading the current or past ledger state of the network.\n",
      "x-displayName": "Sub-APIs",
      "x-traitTag": true
    },
    {
      "name": "Architecture",
      "description": "\n## Request-Response Format\n\nThe API is designed in a JSON-RPC-like style, using HTTP as a transport layer, which means that:\n- Requests always use HTTP POST method.\n- There is no HTTP cache involved.\n- Client-originated errors result in HTTP 4xx error responses.\n- Server-originated errors result in HTTP 5xx error responses:\n    - The error object contains an HTTP-like `code`\n    - The error object also contains a structured/typed properties, with a `type` discriminator, allowing for structured error interpretation in client software.\n\n## Pagination Model\n\nCollections can grow in size therefore every dynamic-length collection is a subject to pagination where a generic data struct is used to represent a chunk (page) of\nunderlying data. Gateway API uses cursor-based pagination model where the sole existence of the cursor indicates that next chunk (page) of the underlying collection is\navailable.\n\n```\ncollection {\n  int64? total_count,\n  string? next_cursor,\n  string? previous_cursor,\n  T[] items\n}\n```\n\n- `total_count` *(optional)* if present specifies the overall size of the underlying collection,\n- `next_cursor` *(optional)* if present indicates that the next chunk (page) exists and can be fetched using collection-specific endpoint and cursor value,\n- `previous_cursor` *(optional)* if present indicates that the previous chunk (page) exists and can be fetched using collection-specific endpoint and cursor value,\n- `items` a chunk (page) of unerlying collection items.\n",
      "x-traitTag": true
    },
    {
      "name": "Concepts",
      "description": "Interacting with this API effectively may require knowledge about the Radix Babylon Transaction Model and the State Model.\n\nWe share some very high-level details below, but please see the [official documentation](http://docs.radixdlt.com) for more details on this.\n\n## Transactions and the Gateway\n\nUser transactions are formed of a core \"intent\", which is then signed by 0+ signatories, before being notarized. The output is called a notarized payload.\nIt is this notarized transaction payload which is submitted to the network.\n\nFor most users, this construction process will generally happen in their Radix Wallet. If you wish to construct transactions programmatically or offline,\nyou will need to integrate the Radix Engine Toolkit into your application for construction and finalization.\n\nOnce submitted, a transaction payload can end up being either rejected or committed. Transactions get rejected if they fail to pass certain criteria at the given time.\nA transaction payload can be marked as a:\n- **Permanent Rejection** if it is never possible for it to be committed (eg it's statically invalid, or only valid up until epoch 100 and it's now epoch 101)\n- **Temporary Rejection** if it still may be possible that the transaction payload could be committed\n\nA given intent typically is only part of one submitted notarized payload, but it's possible for a notary to notarize and submit multiple payloads for the same intent.\nThe Radix Engine ensures that any intent can only be committed once.\n\nA committed transaction is either committed with an outcome of \"Success\" or \"Failure\":\n- **Committed Failure** will result in fees being paid up until the failure point, but all other changes will be discarded.\n- **Committed Success** will result in all changes being committed.\n\nOnly committed transactions appear on ledger.\n\nThe gateway will attempt to submit your transaction to nodes on the network.\nIf it gets temporarily rejected, the error message will be recorded against the transaction, but the Gateway will\nretry submission for a limited time. During this time, the status will be reported as pending.\n\n## State Model\n\nThe Radix Engine consists of \"global entities\".\nA global entity has a Bech32m Address, with a human-readable-prefix (and prefix byte) matching the entity type.\n\nAs an example, entities include concepts like Components, Packages, Vaults, Resource Managers and Key-Value Stores.\n\nEach entity owns substates which store data, and these substates can own other entities.\nFor example, an Account Component has a struct substate which owns a Key-Value Store. This Key-Value store has an\nentry for each resoure the Account owns, and each Key-Value Store Entry owns a corresponding Vault.\n\nFor each global entity, the Gateway aggregates its owned resources by looking at the contents of Vaults in the\nsubtree of entities under that global entity.\n",
      "x-displayName": "Concepts",
      "x-traitTag": true
    },
    {
      "name": "Status",
      "description": "Query information about the Gateway API status.",
      "x-displayName": "Status Endpoints"
    },
    {
      "name": "Transaction",
      "description": "Query status of, construct, preview and submit transactions.",
      "x-displayName": "Transaction Endpoints"
    },
    {
      "name": "Stream",
      "description": "Browse through the history of transactions.",
      "x-displayName": "Stream Endpoints"
    },
    {
      "name": "State",
      "description": "Query information snapshot about state of ledger entities at present or past time.",
      "x-displayName": "State Endpoints"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Overview",
      "tags": [
        "SubAPIs",
        "Concepts",
        "Architecture"
      ]
    },
    {
      "name": "Endpoints",
      "tags": [
        "Status",
        "Transaction",
        "Stream",
        "State"
      ]
    }
  ]
}