/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.babylon.wallet.android.data.gateway.generated.models


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * These are the Scrypto SBOR `ValueKind`s, but with `Bytes` added as an alias for `Vec`, to display such values as hex-encoded strings. 
 *
 * Values: bool,i8,i16,i32,i64,i128,u8,u16,u32,u64,u128,string,`enum`,array,bytes,map,tuple,reference,own,decimal,preciseDecimal,nonFungibleLocalId
 */
@Serializable
enum class ProgrammaticScryptoSborValueKind(val value: kotlin.String) {

    @SerialName(value = "Bool")
    bool("Bool"),

    @SerialName(value = "I8")
    i8("I8"),

    @SerialName(value = "I16")
    i16("I16"),

    @SerialName(value = "I32")
    i32("I32"),

    @SerialName(value = "I64")
    i64("I64"),

    @SerialName(value = "I128")
    i128("I128"),

    @SerialName(value = "U8")
    u8("U8"),

    @SerialName(value = "U16")
    u16("U16"),

    @SerialName(value = "U32")
    u32("U32"),

    @SerialName(value = "U64")
    u64("U64"),

    @SerialName(value = "U128")
    u128("U128"),

    @SerialName(value = "String")
    string("String"),

    @SerialName(value = "Enum")
    `enum`("Enum"),

    @SerialName(value = "Array")
    array("Array"),

    @SerialName(value = "Bytes")
    bytes("Bytes"),

    @SerialName(value = "Map")
    map("Map"),

    @SerialName(value = "Tuple")
    tuple("Tuple"),

    @SerialName(value = "Reference")
    reference("Reference"),

    @SerialName(value = "Own")
    own("Own"),

    @SerialName(value = "Decimal")
    decimal("Decimal"),

    @SerialName(value = "PreciseDecimal")
    preciseDecimal("PreciseDecimal"),

    @SerialName(value = "NonFungibleLocalId")
    nonFungibleLocalId("NonFungibleLocalId");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is ProgrammaticScryptoSborValueKind) "$data" else null

        /**
         * Returns a valid [ProgrammaticScryptoSborValueKind] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): ProgrammaticScryptoSborValueKind? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

