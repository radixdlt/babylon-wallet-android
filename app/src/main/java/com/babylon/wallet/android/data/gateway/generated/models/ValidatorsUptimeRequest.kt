/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.babylon.wallet.android.data.gateway.generated.models

import com.babylon.wallet.android.data.gateway.generated.models.LedgerStateSelector

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * For `at_ledger_state` and `from_ledger_state` you can use one of `state_version`, `epoch`, `epoch` and `round`, or `timestamp`, but then ongoing epoch will be selected and used for querying data. i.e for request with `{ \"from_state_version\" = { \"state_version\" = 100 }, \"at_state_version\" = { \"state_version\" = 300} }` gateway api will check in which epoch transactions with state version 100 and 300 were and then use that as inclusive boundary for request. 
 *
 * @param atLedgerState 
 * @param fromLedgerState 
 * @param validatorAddresses 
 */
@Serializable

data class ValidatorsUptimeRequest (

    @SerialName(value = "at_ledger_state")
    val atLedgerState: LedgerStateSelector? = null,

    @SerialName(value = "from_ledger_state")
    val fromLedgerState: LedgerStateSelector? = null,

    @SerialName(value = "validator_addresses")
    val validatorAddresses: kotlin.collections.List<kotlin.String>? = null

)

