/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.babylon.wallet.android.data.gateway.generated.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param status The status of the transaction.
 * @param feeSummary Fees paid, Only present if the `status` is not `Rejected`.
 * @param stateUpdates Transaction state updates (only present if status is Succeeded or Failed).
 * @param nextEpoch Information (number and active validator list) about new epoch if occured.
 * @param output The manifest line-by-line engine return data (only present if `status` is `Succeeded`).
 * @param events Events emitted by a transaction.
 * @param errorMessage Error message (only present if status is `Failed` or `Rejected`)
 */
@Serializable

data class TransactionReceipt (

    /* The status of the transaction. */
    @SerialName(value = "status")
    val status: String,

    /* Fees paid, Only present if the `status` is not `Rejected`. */
    @SerialName(value = "fee_summary")
    val feeSummary: FeeSummary? = null,

//    /* Transaction state updates (only present if status is Succeeded or Failed). */
//    @Contextual @SerialName(value = "state_updates")
//    val stateUpdates: kotlin.Any? = null,
//
//    /* Information (number and active validator list) about new epoch if occured. */
//    @Contextual @SerialName(value = "next_epoch")
//    val nextEpoch: kotlin.Any? = null,
//
//    /* The manifest line-by-line engine return data (only present if `status` is `Succeeded`). */
//    @Contextual @SerialName(value = "output")
//    val output: kotlin.Any? = null,
//
//    /* Events emitted by a transaction. */
//    @Contextual @SerialName(value = "events")
//    val events: kotlin.Any? = null,

    /* Error message (only present if status is `Failed` or `Rejected`) */
    @SerialName(value = "error_message")
    val errorMessage: kotlin.String? = null

) {
    val isFailed
        get() = status == "Failed" || status == "Rejected"

}

@Serializable
data class FeeSummary(
    @SerialName("cost_unit_limit")
    val cost_unit_limit: Int,
    @SerialName("cost_unit_price")
    val cost_unit_price: String,
    @SerialName("cost_units_consumed")
    val cost_units_consumed: Int,
    @SerialName("tip_percentage")
    val tip_percentage: Int,
    @SerialName("xrd_royalty_receivers")
    val xrd_royalty_receivers: List<String>,
    @SerialName("xrd_total_execution_cost")
    val xrd_total_execution_cost: String,
    @SerialName("xrd_total_royalty_cost")
    val xrd_total_royalty_cost: String,
    @SerialName("xrd_total_tipped")
    val xrd_total_tipped: String
)
