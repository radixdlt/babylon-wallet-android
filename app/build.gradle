plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id "org.sonarqube" version "3.0"
    id "jacoco"
    id 'kotlinx-serialization'
}

apply from: "$rootDir/config/jacoco.gradle"

def debugPropertiesFile = rootProject.file("keystore-development.properties")
def debugKeystoreProperties = new Properties()
debugKeystoreProperties.load(new FileInputStream(debugPropertiesFile))

android {
    compileSdk rootProject.ext.compileSdk

    signingConfigs {
        debug {
            keyAlias debugKeystoreProperties['keyAlias']
            keyPassword debugKeystoreProperties['keyPassword']
            storeFile file(debugKeystoreProperties['storeFile'])
            storePassword debugKeystoreProperties['storePassword']
        }
        debugAlpha {
            keyAlias System.getenv("RADIX_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getenv("RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"))
            storePassword System.getenv("RADIX_ANDROID_KEYSTORE_PASSWORD")
        }
        debugPreview {
            keyAlias System.getenv("RADIX_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getenv("RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"))
            storePassword System.getenv("RADIX_ANDROID_KEYSTORE_PASSWORD")
        }
    }

    defaultConfig {
        applicationId "com.babylon.wallet.android"
        minSdk 27
        targetSdk rootProject.ext.targetSdk
        versionCode 1
        versionName "0.0.1"
        buildConfigField "boolean", "DEBUG_MODE", "true"
        buildConfigField "String", "GATEWAY_API_URL", '"https://nebunet-gateway.radixdlt.com"'
        resValue "string", "app_name", "Radix Wallet"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        debugAlpha {
            initWith debug
            applicationIdSuffix ".alpha"
            minifyEnabled true
            debuggable false
            resValue "string", "app_name", "Radix Wallet Alpha"
            matchingFallbacks = ['debug']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debugPreview {
            initWith debug
            applicationIdSuffix ".preview"
            minifyEnabled true
            debuggable false
            resValue "string", "app_name", "Radix Wallet Preview"
            matchingFallbacks = ['debug']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.kotlinCompilerExtensionVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectKey', 'radixdlt_babylon-wallet-android'
        property 'sonar.projectName', 'babylon-wallet-android'
        property 'sonar.organization', 'radixdlt-github'
        property 'sonar.androidLint.reportPaths', 'build/reports/lint-results-debug.xml'
        property 'sonar.kotlin.detekt.reportPaths', 'build/reports/detekt/debug.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1"
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.6.0-alpha03'
    implementation "androidx.compose.ui:ui:1.3.2"
    implementation "androidx.compose.runtime:runtime:1.3.2"
    implementation "androidx.compose.ui:ui-tooling-preview:1.3.2"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:1.3.1"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation 'androidx.navigation:navigation-compose:2.5.3'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.compose.material3:material3:1.0.1'
    implementation 'androidx.compose.material3:material3-window-size-class:1.1.0-alpha03'
    implementation 'androidx.core:core-splashscreen:1.0.0'

    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.5")

    // Accompanist
    implementation 'com.google.accompanist:accompanist-pager:0.28.0'
    implementation 'com.google.accompanist:accompanist-pager-indicators:0.28.0'
    implementation 'com.google.accompanist:accompanist-drawablepainter:0.28.0'
    implementation 'com.google.accompanist:accompanist-navigation-animation:0.28.0'
    implementation "com.google.accompanist:accompanist-swiperefresh:0.28.0"
    implementation 'com.google.accompanist:accompanist-permissions:0.28.0'

    // Datastore
    implementation 'androidx.datastore:datastore-preferences:1.0.0'

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.44.2'
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt 'com.google.dagger:hilt-android-compiler:2.44.2'

    // Biometric
    implementation 'androidx.biometric:biometric-ktx:1.2.0-alpha05'

    // Coil
    implementation('io.coil-kt:coil-compose:2.2.2')

    // KotlinX serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"

    //Kotlin toolkit
    implementation 'com.radixdlt:kotlin-engine-toolkit:1.9.1-snapshot'
    implementation 'com.radixdlt:slip10-android:1.1-snapshot'

    //Retrofit & OkHttp
    implementation platform('com.squareup.okhttp3:okhttp-bom:4.10.0')
    implementation 'com.squareup.okhttp3:okhttp'
    implementation 'com.squareup.okhttp3:logging-interceptor'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0'

    //Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // ML Kit
    implementation 'com.google.mlkit:barcode-scanning:17.0.3'

    // Camera
    implementation 'androidx.camera:camera-core:1.3.0-alpha02'
    implementation 'androidx.camera:camera-camera2:1.3.0-alpha02'
    implementation 'androidx.camera:camera-lifecycle:1.3.0-alpha02'
    implementation 'androidx.camera:camera-view:1.3.0-alpha02'

    // Peerdroid
    implementation project(path: ':peerdroid')
    implementation project(path: ':profile')
    implementation project(path: ':designsystem')

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.13.3'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation 'org.mockito:mockito-inline:4.8.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.2'

    debugImplementation 'androidx.compose.ui:ui-tooling:1.3.2'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.2'
}
