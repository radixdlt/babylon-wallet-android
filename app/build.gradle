plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id "org.sonarqube" version "3.0"
    id "jacoco"
    id 'kotlinx-serialization'
    id 'kotlin-parcelize'
}

apply from: "$rootDir/config/jacoco.gradle"

static def getCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

ext.keystoreProperties = { isDebug ->
    def fileName = (isDebug) ? "../config/signing/debug/keystore.properties"
            : "../config/signing/release/keystore.properties"
    try {
        def properties = new Properties()
        properties.load(new FileInputStream(file(fileName)))

        return properties
    } catch (Exception ignored) {
        return null
    }
}

android {
    signingConfigs {
        debug {
            def properties = keystoreProperties(true)
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']
            storeFile file(properties['storeFile'])
            storePassword properties['storePassword']
        }
        release {
            def properties = keystoreProperties(false)
            if (properties != null) {
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
                storeFile file(properties['storeFile'])
                storePassword properties['storePassword']
            }
        }
    }

    compileSdk rootProject.ext.compileSdk
    defaultConfig {
        applicationId "com.radixpublishing.radixwallet.android"
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        versionCode 1
        versionName rootProject.ext.versionName
        buildConfigField "boolean", "DEBUG_MODE", "true"
        buildConfigField "boolean", "EXPERIMENTAL_FEATURES_ENABLED", "true"
        buildConfigField "String", "WELL_KNOWN_URL_SUFFIX", '".well-known/radix.json"'
        buildConfigField "String", "IMAGE_HOST_BASE_URL", '"https://image-service-dev.extratools.works"'
        resValue "string", "app_name", "Radix Wallet"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            testCoverageEnabled true
            versionNameSuffix "-" + rootProject.ext.internalVersionName + "-" + getCommitHash()
            resValue "string", "app_name", "Radix Wallet Dev"
        }
        debugAlpha {
            initWith debug
            applicationIdSuffix ".alpha"
            minifyEnabled true
            debuggable false
            resValue "string", "app_name", "Radix Wallet Alpha"
            matchingFallbacks = ['debug']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "boolean", "EXPERIMENTAL_FEATURES_ENABLED", "false"
            buildConfigField "String", "IMAGE_HOST_BASE_URL", '"https://image-service.radixdlt.com"'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.kotlinCompilerExtensionVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    namespace 'com.babylon.wallet.android'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectKey', 'radixdlt_babylon-wallet-android'
        property 'sonar.projectName', 'babylon-wallet-android'
        property 'sonar.organization', 'radixdlt-github'
        property 'sonar.androidLint.reportPaths', 'build/reports/lint-results-debug.xml'
        property 'sonar.kotlin.detekt.reportPaths', 'build/reports/detekt/debug.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    }
}

dependencies {
    implementation project(path: ':core')

    implementation libs.androidxCore
    implementation libs.lifecycleRuntimeKtx
    implementation libs.lifecycleViewmodelKtx
    implementation libs.lifecycleViewModelCompose
    implementation libs.lifecycelRuntimeCompose
    implementation libs.composeUi
    implementation libs.composeRuntime
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation libs.composeFoundation
    implementation libs.composeConstraintLayout
    implementation libs.composeActivity
    implementation libs.composeNavigation
    implementation libs.material
    implementation libs.composeMaterial3
    implementation libs.material3WindowSizeClass
    implementation libs.splash

    implementation libs.immutableCollections

    // Accompanist
    implementation libs.accompanistPagerIndicators
    implementation libs.accompanistDrawablePainter
    implementation libs.accompanistNavigationAnimation
    implementation libs.accompanistPermissions
    implementation libs.accompanistPlaceholder
    implementation libs.accompanistSystemUiController

    // Datastore
    implementation libs.datastorePreferences

    // Hilt
    implementation libs.hilt
    implementation libs.hiltNavigation
    kapt libs.hiltCompiler

    // Biometric
    implementation libs.biometricKtx

    // Coil
    implementation libs.coilCompose
    implementation libs.coilComposeSvg

    // KotlinX serialization
    implementation libs.kotlinxSerialization

    //Kotlin toolkit
    implementation libs.retAndroid
    implementation libs.slip10

    //Retrofit & OkHttp
    implementation platform(libs.okhttpBom)
    implementation libs.okhttp
    implementation libs.okhttpInterceptor
    implementation libs.retrofit
    implementation libs.retrofitKoltinxConverter

    //Timber
    implementation libs.timber

    // ML Kit
    implementation libs.barcode

    // Camera
    implementation libs.cameraCore
    implementation libs.camera2
    implementation libs.cameraLifecycle
    implementation libs.cameraView

    // Peerdroid
    implementation project(path: ':peerdroid')
    implementation project(path: ':profile')
    implementation project(path: ':designsystem')

    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.coroutinesTest
    testImplementation libs.mockitoKotlin
    testImplementation libs.mockitoInline
    testImplementation libs.turbine
    testImplementation libs.retKotlin

    androidTestImplementation libs.androidXJunit
    androidTestImplementation libs.espresso
    androidTestImplementation libs.composeUiTestJunit

    implementation libs.composeUiToolingPreview
    debugImplementation libs.composeUiTooling
    debugImplementation libs.composeUiTestManifest
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.withType(Test.class).configureEach {
    jacoco {
        excludes = ["*"]
    }
}
/**
 * Copies the english translation file to the default location.
 * This is needed since Crowdin cannot create pull requests
 * in a path that does not declare the language code.
 *
 * So assuming that the english language defined in the values-es is the default,
 * this will be the file that gets copied.
 */
task buildDefaultLanguage {
    copy {
        from ('src/main/res/values-en/strings.xml')
        into ('src/main/res/values/')
    }
}
preBuild.dependsOn buildDefaultLanguage
