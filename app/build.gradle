plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.hilt
    alias libs.plugins.sonarqube
    alias libs.plugins.ksp
    id "jacoco"
    id 'kotlin-parcelize'
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.google.services
    alias libs.plugins.firebase.crashlytics
}

apply from: "$rootDir/config/jacoco.gradle"

static def getCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

ext.keystoreProperties = { isDebug ->
    def fileName = (isDebug) ? "../config/signing/debug/keystore.properties"
            : "../config/signing/release/keystore.properties"
    return loadFileProperties(fileName)
}

ext.secretProperties = {
    def fileName = "../config/secrets/secrets.properties"
    return loadFileProperties(fileName)
}

ext.loadFileProperties = { fileName ->
    try {
        def properties = new Properties()
        properties.load(new FileInputStream(file(fileName)))

        return properties
    } catch (Exception ignored) {
        return null
    }
}

ext.buildConfigProperty = { properties, name ->
    "\"${propertyOrEmpty(properties, name)}\""
}

ext.propertyOrEmpty = { properties, name ->
    def fallback = ""
    if (properties == null) return fallback

    def property = properties[name]
    return property != null ? property : fallback
}

android {
    signingConfigs {
        debug {
            def properties = keystoreProperties(true)
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']
            storeFile file(properties['storeFile'])
            storePassword properties['storePassword']
        }
        release {
            def properties = keystoreProperties(false)
            if (properties != null) {
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
                storeFile file(properties['storeFile'])
                storePassword properties['storePassword']
            }
        }
    }

    compileSdk rootProject.ext.compileSdk
    defaultConfig {
        applicationId "com.radixpublishing.radixwallet.android"
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        versionCode 46
        versionName "1.8.1"
        buildConfigField "boolean", "DEBUG_MODE", "true"
        buildConfigField "boolean", "CRASH_REPORTING_AVAILABLE", "false"
        buildConfigField "boolean", "EXPERIMENTAL_FEATURES_ENABLED", "true"
        buildConfigField "String", "WELL_KNOWN_URL_SUFFIX", '".well-known/radix.json"'
        buildConfigField "String", "IMAGE_HOST_BASE_URL", '"https://image-service-dev.extratools.works"'
        buildConfigField "String", "NPS_SURVEY_URL", '"https://dev-wallet-net-promoter-score.radixdlt.com/"'
        buildConfigField "String", "REFINER_FORM_UUID", '"281622a0-dc6b-11ee-8fd1-23c96056fbd2"'
        resValue "string", "app_name", "Radix Wallet"

        def properties = secretProperties()
        buildConfigField "String", "APPS_FLYER_DEV_KEY", buildConfigProperty(properties, 'appsFlyerDevKey')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.schemaLocation"] = "${projectDir.getParentFile()}/config/schemas"
            }
        }
    }

    buildTypes {
        // keep the default build types (debug, release) at the TOP of the closure
        // if you want your other custom build types to inherit the properties of the default ones
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            testCoverageEnabled true
            versionNameSuffix "-" + rootProject.ext.internalVersionName + "-" + getCommitHash()
            resValue "string", "app_name", "Radix Wallet Dev"
        }
        debugAlpha {
            initWith debug
            applicationIdSuffix ".alpha"
            buildConfigField "boolean", "CRASH_REPORTING_AVAILABLE", "true"
            minifyEnabled true
            debuggable false
            resValue "string", "app_name", "Radix Wallet Alpha"
            matchingFallbacks = ['debug']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            buildConfigField "boolean", "DEBUG_MODE", "false"
            buildConfigField "boolean", "CRASH_REPORTING_AVAILABLE", "true"
            buildConfigField "boolean", "EXPERIMENTAL_FEATURES_ENABLED", "false"
            buildConfigField "String", "NPS_SURVEY_URL", '"https://wallet-net-promoter-score.radixdlt.com/"'
            buildConfigField "String", "RCR_URL", '"https://radix-connect-relay.radixdlt.com/"'
            buildConfigField "String", "REFINER_FORM_UUID", '"3432b6e0-dfad-11ee-a53c-95167f067d9c"'
            buildConfigField "String", "IMAGE_HOST_BASE_URL", '"https://image-service.radixdlt.com"'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.kotlinCompilerExtensionVersion
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
            excludes += "META-INF/DEPENDENCIES"
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    afterEvaluate {
        tasks.configureEach { task ->
            if (task.name.contains("Test") && task.name.contains("compile")) {
                kotlinOptions.freeCompilerArgs += '-Xopt-in=com.radixdlt.sargon.annotation.UsesSampleValues'
            }
        }
    }
    namespace 'com.babylon.wallet.android'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectKey', 'radixdlt_babylon-wallet-android'
        property 'sonar.projectName', 'babylon-wallet-android'
        property 'sonar.organization', 'radixdlt-github'
        property 'sonar.androidLint.reportPaths', 'build/reports/lint-results-debug.xml'
        property 'sonar.kotlin.detekt.reportPaths', 'build/reports/detekt/debug.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    }
}

dependencies {
    implementation project(path: ':core')

    implementation libs.androidxCore
    implementation libs.lifecycleRuntimeKtx
    implementation libs.lifecycleViewmodelKtx
    implementation libs.lifecycleViewModelCompose
    implementation libs.lifecycelRuntimeCompose
    implementation libs.composeUi
    implementation libs.composeRuntime
    implementation libs.composeFoundation
    implementation libs.composeConstraintLayout
    implementation libs.composeActivity
    implementation libs.composeNavigation
    implementation libs.material
    implementation libs.composeMaterial3
    implementation libs.material3WindowSizeClass
    implementation libs.splash

    implementation libs.immutableCollections

    // Accompanist
    implementation libs.accompanistPagerIndicators
    implementation libs.accompanistDrawablePainter
    implementation libs.accompanistPermissions
    implementation libs.accompanistPlaceholder
    implementation libs.accompanistSystemUiController

    // Datastore
    implementation libs.datastorePreferences

    // Hilt
    implementation libs.hilt
    implementation libs.hiltNavigation
    ksp libs.hiltCompiler
    // Hilt WorkerManager
    implementation libs.androidXHiltWorker
    ksp libs.androidXHiltCompiler

    // Biometric
    implementation libs.biometricKtx

    // Coil
    implementation libs.coilCompose
    implementation libs.coilComposeSvg
    implementation libs.coilComposeGif

    // KotlinX serialization
    implementation libs.kotlinxSerialization

    //Retrofit & OkHttp
    implementation platform(libs.okhttpBom)
    implementation libs.okhttp
    implementation libs.okhttpInterceptor
    implementation libs.retrofit
    implementation libs.retrofitKoltinxConverter

    // Database
    implementation libs.roomRuntime
    implementation libs.roomKtx
    ksp libs.roomCompiler

    //Timber
    implementation libs.timber

    // ML Kit
    implementation libs.barcode

    // Camera
    implementation libs.cameraCore
    implementation libs.camera2
    implementation libs.cameraLifecycle
    implementation libs.cameraView

    // Rootcheck
    implementation libs.rootCheck

    // apache commons validator
    implementation libs.apacheCommonsValidator

    // Peerdroid
    implementation project(path: ':peerdroid')
    implementation project(path: ':profile')
    implementation project(path: ':designsystem')

    // Analytics
    implementation libs.appsFlyer
    implementation libs.installReferrer

    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.coroutinesTest
    testImplementation libs.mockitoKotlin
    testImplementation libs.mockitoInline
    testImplementation libs.turbine

    androidTestImplementation libs.androidXJunit
    androidTestImplementation libs.espresso
    androidTestImplementation libs.espressoIntents
    androidTestImplementation libs.composeUiTestJunit

    implementation libs.composeUiToolingPreview
    debugImplementation libs.composeUiTooling
    debugImplementation libs.composeUiTestManifest

    // Needed for compose previews to run with Sargon
    debugRuntimeOnly(libs.sargonDesktop) {
        exclude(group: "net.java.dev.jna")
    }
    // Needed for unit tests to run with Sargon
    testRuntimeOnly libs.sargonDesktop
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.withType(Test.class).configureEach {
    jacoco {
        excludes = ["*"]
    }
}

/**
 * Copies the english translation file to the default location.
 * This is needed since Crowdin cannot create pull requests
 * in a path that does not declare the language code.
 *
 * So assuming that the english language defined in the values-es is the default,
 * this will be the file that gets copied.
 */
task buildDefaultLanguage {
    copy {
        from('src/main/res/values-en/strings.xml')
        into 'src/main/res/values/'
    }
    // Move content from values/strings.xml to values-en/strings.xml
    copy {
        from('src/main/res/values/strings.xml')
        into 'src/main/res/values-en/'
    }
}
preBuild.dependsOn buildDefaultLanguage
