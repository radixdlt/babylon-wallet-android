plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id "org.sonarqube" version "3.0"
    id "jacoco"
    id 'kotlinx-serialization'
}

apply from: "$rootDir/config/jacoco.gradle"

def debugPropertiesFile = rootProject.file("keystore-development.properties")
def debugKeystoreProperties = new Properties()
debugKeystoreProperties.load(new FileInputStream(debugPropertiesFile))

android {
    compileSdk rootProject.ext.compileSdk

    signingConfigs {
        debug {
            keyAlias debugKeystoreProperties['keyAlias']
            keyPassword debugKeystoreProperties['keyPassword']
            storeFile file(debugKeystoreProperties['storeFile'])
            storePassword debugKeystoreProperties['storePassword']
        }
        debugAlpha {
            keyAlias System.getenv("RADIX_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getenv("RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"))
            storePassword System.getenv("RADIX_ANDROID_KEYSTORE_PASSWORD")
        }
        debugPreview {
            keyAlias System.getenv("RADIX_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getenv("RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"))
            storePassword System.getenv("RADIX_ANDROID_KEYSTORE_PASSWORD")
        }
        releasePreview {
            keyAlias System.getenv("RADIX_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getenv("RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"))
            storePassword System.getenv("RADIX_ANDROID_KEYSTORE_PASSWORD")
        }
    }

    defaultConfig {
        applicationId "com.babylon.wallet.android"
        minSdk 27
        targetSdk rootProject.ext.targetSdk
        versionCode 1
        versionName "0.2.1"
        buildConfigField "boolean", "DEBUG_MODE", "true"
        buildConfigField "String", "GATEWAY_API_URL", '"https://betanet.radixdlt.com"'
        buildConfigField "String", "WELL_KNOWN_URL_SUFFIX", '".well-known/radix.json"'
        resValue "string", "app_name", "Radix Wallet"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        debugAlpha {
            initWith debug
            applicationIdSuffix ".alpha"
            minifyEnabled true
            debuggable false
            resValue "string", "app_name", "Radix Wallet Alpha"
            matchingFallbacks = ['debug']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debugPreview {
            initWith release
            applicationIdSuffix ".preview"
            minifyEnabled true
            signingConfig signingConfigs.debugPreview
            resValue "string", "app_name", "Radix Wallet Preview"
            matchingFallbacks = ['release']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        releasePreview {
            initWith release
            buildConfigField "boolean", "DEBUG_MODE", "false"
            signingConfig signingConfigs.releasePreview
            applicationIdSuffix ".preview"
            minifyEnabled true
            resValue "string", "app_name", "Radix Wallet Preview"
            matchingFallbacks = ['release']
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            buildConfigField "boolean", "DEBUG_MODE", "false"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.kotlinCompilerExtensionVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property 'sonar.projectKey', 'radixdlt_babylon-wallet-android'
        property 'sonar.projectName', 'babylon-wallet-android'
        property 'sonar.organization', 'radixdlt-github'
        property 'sonar.androidLint.reportPaths', 'build/reports/lint-results-debug.xml'
        property 'sonar.kotlin.detekt.reportPaths', 'build/reports/detekt/debug.xml'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    }
}

dependencies {
    implementation project(path: ':core')

    implementation libs.androidxCore
    implementation libs.lifecycleRuntimeKtx
    implementation libs.lifecycleViewmodelKtx
    implementation libs.lifecycleViewModelCompose
    implementation libs.lifecycelRuntimeCompose
    implementation libs.composeUi
    implementation libs.composeRuntime
    implementation libs.composeUiTooling
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation libs.composeFoundation
    implementation libs.composeConstraintLayout
    implementation libs.composeActivity
    implementation libs.composeNavigation
    implementation libs.material
    implementation libs.composeMaterial3
    implementation libs.material3WindowSizeClass
    implementation libs.splash

    implementation libs.immutableCollections

    // Accompanist
    implementation libs.accompanistPagerIndicators
    implementation libs.accompanistDrawablePainter
    implementation libs.accompanistNavigationAnimation
    implementation libs.accompanistSwipeRefresh
    implementation libs.accompanistPermissions
    implementation libs.accompanistPlaceholder

    // Datastore
    implementation libs.datastorePreferences

    // Hilt
    implementation libs.hilt
    implementation libs.hiltNavigation
    kapt libs.hiltCompiler

    // Biometric
    implementation libs.biometricKtx

    // Coil
    implementation libs.coilCompose

    // KotlinX serialization
    implementation libs.kotlinxSerialization

    //Kotlin toolkit
    implementation libs.ket
    implementation libs.slip10

    //Retrofit & OkHttp
    implementation platform(libs.okhttpBom)
    implementation libs.okhttp
    implementation libs.okhttpInterceptor
    implementation libs.retrofit
    implementation libs.retrofitKoltinxConverter

    //Timber
    implementation libs.timber

    // ML Kit
    implementation libs.barcode

    // Camera
    implementation libs.cameraCore
    implementation libs.camera2
    implementation libs.cameraLifecycle
    implementation libs.cameraView

    // Peerdroid
    implementation project(path: ':peerdroid')
    implementation project(path: ':profile')
    implementation project(path: ':designsystem')

    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.coroutinesTest
    testImplementation libs.mockitoKotlin
    testImplementation libs.mockitoInline
    testImplementation libs.turbine

    androidTestImplementation libs.androidXJunit
    androidTestImplementation libs.espresso
    androidTestImplementation libs.composeUiTestJunit

    debugImplementation libs.composeUiTooling
    debugImplementation libs.composeUiTestManifest
}
