name: "App releases"

on:
  push:
    branches:
      - "main"
      - "feature/ABW-2149-ci"
  release:
    types:
      - "published"
  workflow_dispatch:
    inputs:
      track:
        description: "Which track do you want to deploy to"
        required: true
        type: choice
        options:
          - 'Firebase Dev'
          - 'Google Play Alpha'
          - 'Google Play Production'
        default: 'Firebase Dev'
#      TODO add more inputs later
#      release_notes:
#        description: "(Optional) Release notes for version you want to distribute (not needed for Alpha flavor)"
#        required: false
#        default: ''
#      groups:
#        description: "(Optional) Name of the group you want to notify about new version"
#        required: false
#        default: 'alpha-devs'
#        type: choice
#        options:
#          - "alpha-devs"
#          - "internal"
#          - "no"

jobs:

  firebase_alpha:
    if: >
      ( github.ref == 'refs/heads/main' && github.event_name == 'push' ) ||
      ( github.event.inputs.track == 'Firebase Dev' && github.event_name == 'workflow_dispatch' )
    name: "Publish to Firebase"
    runs-on: ubuntu-latest
    environment: Debug
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          token: ${{ secrets.RADIX_BOT_PAT }}

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@516dbb0c760f39b4cdd750ae095f1688780f68f4

      - name: Download Ruby (action)
        uses: ruby/setup-ruby@c7079efafd956afb5d823e8999c2506e1053aefa
        with:
          ruby-version: '3.1.2'
          bundler-cache: true

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Decode Google Service account credentials
        uses: timheuer/base64-to-file@48657ba25c726c2e3dcf02efa3639fff9b3d587e
        id: google_application_credentials
        with:
          fileName: "service_account.json"
          encodedString: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE_64 }}

      - name: Distribute Alpha to Firebase
        run: |
#          export GROUPS=${GROUPS:-"alpha-devs"}
#          if [ "$GROUPS" == "no" ]; then
#            GROUPS=''
#          fi

          git config user.name $GIT_USER
          git config user.email $GIT_USER
          bundle exec fastlane deployFirebaseAlpha
          echo "### Distributed to Firebase! :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.google_application_credentials.outputs.filePath }}
          RELEASE_NOTES: ${{ github.event.inputs.release_notes }}
          GROUPS: "alpha-devs"
          SLACK_URL: ${{ secrets.SLACK_URL }}
          GIT_USER: ${{ secrets.RADIX_BOT_USERNAME }}
          GPR_USER: ${{ secrets.GPR_USER }}
          GPR_TOKEN: ${{ secrets.GPR_TOKEN }}

  playstore_releases:
    if: >
      github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.track == 'Google Play Alpha' || github.event.inputs.track == 'Google Play Production'))
    name: "Publish to PlayStore"
    runs-on: ubuntu-latest
    environment: Release
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          token: ${{ secrets.RADIX_BOT_PAT }}

      - name: Dump context
        uses: crazy-max/ghaction-dump-context@516dbb0c760f39b4cdd750ae095f1688780f68f4

      - name: Download Ruby (action)
        uses: ruby/setup-ruby@c7079efafd956afb5d823e8999c2506e1053aefa
        with:
          ruby-version: '3.1.2'
          bundler-cache: true

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Decode keystore credentials
        run: |
          mkdir config/signing/release
          echo "${{ secrets.KEYSTORE_ENCRYPTED_BASE64 }}" > keystore.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch keystore.asc > config/signing/release/keystore.jks
                  
          echo "keyAlias=${{ secrets.KEYSTORE_ALIAS }}" > config/signing/release/keystore.properties
          echo "keyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}" >> config/signing/release/keystore.properties
          echo "storeFile=../config/signing/release/keystore.jks" >> config/signing/release/keystore.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> config/signing/release/keystore.properties

      - name: set commit branch for release
        if: github.event_name == 'release'
        run: |        
          echo "RELEASE_BRANCH=${{ github.event.release.target_commitish }}" >> $GITHUB_ENV

      - name: Distribute to Google Play
        run: |
          track="alpha"
          if [ ${{ github.event_name == 'workflow_dispatch' }} ]; then
            if [ ${{ github.event.inputs.track == 'Google Play Production' }} ]; then
              track="production"
            fi
          fi
          
          git config user.name $GIT_USER
          git config user.email $GIT_USER
          bundle exec fastlane deployRelease track:$track
          echo "### Distributed to Google Play '$track' track! :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          RELEASE_TRACK: ${{ github.event.release.prerelease == true && 'alpha' || 'production' }}
          SLACK_URL: ${{ secrets.SLACK_URL }}
          GIT_USER: ${{ secrets.RADIX_BOT_USERNAME }}
          GPR_USER: ${{ secrets.GPR_USER }}
          GPR_TOKEN: ${{ secrets.GPR_TOKEN }}
          RELEASE_BRANCH: ${{ env.RELEASE_BRANCH }}
          GOOGLE_PLAY_DEPLOYER_JSON_FILE: ${{ secrets.GOOGLE_PLAY_DEPLOYER_JSON_FILE }}

  publish_sbom:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: Release
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - name: Decode keystore credentials
        run: |
          mkdir config/signing/release
          echo "${{ secrets.KEYSTORE_ENCRYPTED_BASE64 }}" > keystore.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch keystore.asc > config/signing/release/keystore.jks

          echo "keyAlias=${{ secrets.KEYSTORE_ALIAS }}" > config/signing/release/keystore.properties
          echo "keyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}" >> config/signing/release/keystore.properties
          echo "storeFile=../config/signing/release/keystore.jks" >> config/signing/release/keystore.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> config/signing/release/keystore.properties

      - name: Generate SBOM
        uses: snyk/actions/gradle-jdk17@b98d498629f1c368650224d6d212bf7dfa89e4bf # v0.4.0
        with:
          args: --all-projects --org=${{ secrets.SNYK_ORG_ID }} --format=cyclonedx1.4+json --json-file-output sbom.json
          command: sbom
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          RADIX_DEBUG_PREVIEW_KEYSTORE_FILE: config/signing/release/keystore.jks
      - name: Upload SBOM
        uses: svenstaro/upload-release-action@2b9d2847a97b04d02ad5c3df2d3a27baa97ce689 # v2.6.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: sbom.json
          tag: ${{ github.ref }}
          overwrite: true
