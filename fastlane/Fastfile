
desc "Deploy debug (alpha) variant into Firebase"
lane :firebaseAlpha do
    branch_name = git_branch
    commit = last_git_commit

    gradle(
        task: "assemble",
        flavor: "Debug",
        build_type: "Alpha",
    )
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes: "Branch: " + branch_name + "\n" + "Commit: " + commit[:message],
        groups: ENV["GROUPS"]
    )
end

desc "Deploy release variant into Firebase"
lane :firebaseRelease do
    gradle(
        task: "assemble",
        build_type: "Release"
    )
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes: ENV["RELEASE_NOTES"],
        groups: ENV["GROUPS"]
    )
end

desc "Deploy release variant into Play Store"
lane :googlePlayRelease do |options|
    internal = options[:internal] == true || false
    track = internal ? "internal" : "production"
    UI.success "Starting release to PlayStore for '#{track}' track"

    currentVersionCode = latestGooglePlayVersionCode()
    versionCode = currentVersionCode + 1

    android_set_version_code(
        version_code: versionCode,
        gradle_file: "app/build.gradle"
    )

    gradle(
       tasks: [
           "bundleRelease",  # Builds the bundle for PlayStore
           "assembleRelease" # Builds the APK that extracts the output.json for the version
       ]
    )

    aabPath = Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    apkPath = Actions.lane_context[SharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH]

    versionName = get_version_name(output_file: apkPath)

    upload_to_play_store(
        track: internal ? "internal" : "production",
        aab: aabPath,
        skip_upload_apk: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        release_status: "draft",
        json_key: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
    )

    git_commit(
        path: "app/build.gradle",
        message: "Version #{versionName} (#{versionCode}) distributed to PlayStore."
    )
    push_to_git_remote(
        remote_branch: ENV["RELEASE_BRANCH"],
        tags: false
    )
end


# after_all do |beta|
#   slack(
#     message: "New Android version of Babylon Wallet is released!",
#     slack_url: ENV["SLACK_URL"],
#     use_webhook_configured_username_and_icon: "false",
#     username: "fastlane",
#     icon_url: "https://fastlane.tools/assets/img/fastlane_icon.png",
#     success: true
# )
# end

# error do |beta, exception|
#   slack(
#     message: exception.message,
#     success: false
#   )
# end

lane :get_version_name do |options|
    output = read_json(json_path: options[:output_file])
    output[:elements][0][:versionName]
end

desc "Get the maximum version code from Play Store"
lane :latestGooglePlayVersionCode do
    productionVersionCodes = []
    begin
        productionVersionCodes = google_play_track_version_codes(
            track: 'production',
            json_key: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
    rescue => e
    end

    betaVersionCodes = []
    begin
        betaVersionCodes = google_play_track_version_codes(
            track: 'beta',
            json_key: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
    rescue => e
    end

   alphaVersionCodes = []
   begin
        alphaVersionCodes = google_play_track_version_codes(
            track: 'alpha',
            json_key: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
   rescue => e
   end

   internalVersionCodes = []
   begin
        internalVersionCodes = google_play_track_version_codes(
            track: 'internal',
            json_key: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
   rescue => e
   end

    # puts version codes from all tracks into the same array
    versionCodes = [
        productionVersionCodes,
        betaVersionCodes,
        alphaVersionCodes,
        internalVersionCodes
    ].reduce([], :concat)

    # returns the highest version code from array
    versionCodes.max
end
