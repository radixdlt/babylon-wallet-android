
desc "Deploy alpha to Firebase"
lane :deployFirebaseAlpha do
    branch_name = git_branch
    commit = last_git_commit

    gradle(
        task: "assemble",
        flavor: "Debug",
        build_type: "Alpha",
    )
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes: "Branch: " + branch_name + "\n" + "Commit: " + commit[:message],
        groups: ENV["GROUPS"]
    )
end

desc "Deploy Release"
lane :deployRelease do |options|
    track = options[:track] ||= 'production'

    testTracks = ['beta', 'alpha', 'internal']
    if testTracks.include?(track) == false && track != 'production'
        UI.user_error!("Track '#{track}' is not a valid. Valid tracks are: production, beta, alpha, internal")
    else
        UI.success "Starting release to PlayStore for '#{track}' track"
    end

    currentVersionCode = latestGooglePlayVersionCode()
    versionCode = currentVersionCode + 1

    android_set_version_code(
        version_code: versionCode,
        gradle_file: "app/build.gradle"
    )

    gradle(
       tasks: [
           "bundleRelease",  # Builds the bundle for PlayStore
           "assembleRelease" # Builds the APK that extracts the output.json for the version
       ]
    )

    aabPath = Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    apkPath = Actions.lane_context[SharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH]

    versionName = get_version_name(output_file: apkPath)

    upload_to_play_store(
        track: track,
        aab: aabPath,
        skip_upload_apk: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        release_status: "draft",
        json_key_data: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
    )

    git_commit(
        path: "app/build.gradle",
        message: "Version #{versionName} (#{versionCode}) distributed to PlayStore."
    )
    push_to_git_remote(
        remote_branch: ENV["RELEASE_BRANCH"],
        tags: false
    )
end

private_lane :get_version_name do |options|
    output = read_json(json_path: options[:output_file])
    output[:elements][0][:versionName]
end

desc "Get the maximum version code from Play Store"
private_lane :latestGooglePlayVersionCode do
    productionVersionCodes = []
    begin
        productionVersionCodes = google_play_track_version_codes(
            track: 'production',
            json_key_data: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
    rescue => e
    end

    betaVersionCodes = []
    begin
        betaVersionCodes = google_play_track_version_codes(
            track: 'beta',
            json_key_data: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
    rescue => e
    end

    alphaVersionCodes = []
    begin
        alphaVersionCodes = google_play_track_version_codes(
            track: 'alpha',
            json_key_data: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
    rescue => e
    end

    internalVersionCodes = []
    begin
        internalVersionCodes = google_play_track_version_codes(
            track: 'internal',
            json_key_data: ENV['GOOGLE_PLAY_DEPLOYER_JSON_FILE']
        )
    rescue => e
    end

    versionCodes = [
        productionVersionCodes,
        betaVersionCodes,
        alphaVersionCodes,
        internalVersionCodes
    ].reduce([], :concat)

    # returns the highest version code from array
    versionCodes.max
end
