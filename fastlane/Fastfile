
desc "Deploy debug (alpha) variant into Firebase"
lane :firebaseAlpha do
    branch_name = git_branch
    commit = last_git_commit

    gradle(
        task: "assemble",
        flavor: "Debug",
        build_type: "Alpha",
    )
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes: "Branch: " + branch_name + "\n" + "Commit: " + commit[:message],
        groups: ENV["GROUPS"]
    )
end

desc "Deploy release variant into Firebase"
lane :firebaseRelease do
    gradle(
        task: "assemble",
        build_type: "Release"
    )
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes: ENV["RELEASE_NOTES"],
        groups: ENV["GROUPS"]
    )
end

desc "Deploy release variant into Play Store"
lane :googlePlayRelease do |options|

    internal = options[:internal] == true || false
    track = internal ? "internal" : "production"

    puts latestGooglePlayVersionCode
#     gradle(
#         tasks: [
#             "bundleReleasePreview",  # Builds the bundle for PlayStore
#             "assembleReleasePreview" # Builds the APK that extracts the output.json for the version
#         ]
#     )
#
#     upload_to_play_store(
#         track: internal ? "internal" : "production",
#         aab: Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
#         skip_upload_apk: true,
#         skip_upload_images: true,
#         skip_upload_screenshots: true,
#         release_status: "draft",
#         json_key: ENV["GOOGLE_PLAY_JSON_FILE"]
#     )
end

# desc "Deploy to Google Play Console"
# lane :release_to_google_play do
#
#     BUILD_NUMBER_FILE = "PLAYSTORE_BUILD_NUMBER"
#     bump_build_number versioning_file: "../versioning/#{BUILD_NUMBER_FILE}"
#     gradle(
#         tasks: [
#             "bundleReleasePreview",  # Builds the bundle for PlayStore
#             "assembleReleasePreview" # Builds the APK that extracts the output.json for the version
#         ],
#         properties: {
#             "android.injected.signing.store.file" => ENV["RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"],
#             "android.injected.signing.store.password" => ENV["RADIX_ANDROID_KEYSTORE_PASSWORD"],
#             "android.injected.signing.key.alias" => ENV["RADIX_ANDROID_KEYSTORE_ALIAS"],
#             "android.injected.signing.key.password" => ENV["RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"]
#         }
#     )
#
#     upload_to_play_store(
#         package_name: "com.babylon.wallet.android.preview",
#         track: "internal",
#         aab: Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
#         skip_upload_apk: true,
#         skip_upload_images: true,
#         skip_upload_screenshots: true,
#         release_status: "draft",
#         json_key: ENV["GOOGLE_PLAY_PREVIEW_DEPLOYER_JSON_FILE"]
#     )
#
#     build_number_to_commit = File.read("../versioning/#{BUILD_NUMBER_FILE}")
#     version_name = get_version_name output_file: Actions.lane_context[SharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH]
#     git_commit(
#         path: "./versioning/#{BUILD_NUMBER_FILE}",
#         message: "Version #{version_name} (#{build_number_to_commit}) distributed to Playstore"
#     )
#     push_to_git_remote(
#         remote_branch: ENV["RELEASE_BRANCH"],
#         tags: false
#     )
# end


# after_all do |beta|
#   slack(
#     message: "New Android version of Babylon Wallet is released!",
#     slack_url: ENV["SLACK_URL"],
#     use_webhook_configured_username_and_icon: "false",
#     username: "fastlane",
#     icon_url: "https://fastlane.tools/assets/img/fastlane_icon.png",
#     success: true
# )
# end

# error do |beta, exception|
#   slack(
#     message: exception.message,
#     success: false
#   )
# end

lane :bump_build_number do |options|

    current_build_number = File.read(options[:versioning_file]).to_i
    new_build_number = current_build_number + 1
    File.write(options[:versioning_file], new_build_number, mode:"w")

    android_set_version_code(
        version_code: File.read(options[:versioning_file]), # optional, if not specified, Version Code will be incremented
        gradle_file: "app/build.gradle"
    )

end

lane :get_version_name do |options|
    output = read_json(json_path: options[:output_file])
    output[:elements][0][:versionName]
end

def latestGooglePlayVersionCode
    jsonKey = "~/Downloads/GOOGLE_PLAY_JSON.json"
    productionVersionCodes = google_play_track_version_codes(track: 'production', json_key: jsonKey)
    betaVersionCodes = google_play_track_version_codes(track: 'beta', json_key: jsonKey)
    alphaVersionCodes = google_play_track_version_codes(track: 'alpha', json_key: jsonKey)
    internalVersionCodes = google_play_track_version_codes(track: 'internal', json_key: jsonKey)

    # puts version codes from all tracks into the same array
    versionCodes = [
        productionVersionCodes,
        betaVersionCodes,
        alphaVersionCodes,
        internalVersionCodes
    ].reduce([], :concat)

    # returns the highest version code from array
    return versionCodes.max
end
