# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

desc "Deploy merges to main and any other manual trigger"
lane :alpha do

  branch_name = git_branch
  version_name = android_get_version_name
  commit = last_git_commit
  ENV["RELEASE_NOTES"] = "Branch: " + branch_name + "\n" + "Commit: " + commit[:message]
  short_hash = commit[:abbreviated_commit_hash]
  version = version_name + "-" + short_hash
  android_set_version_name(
    version_name: version
  )
  gradle(
      task: "assemble",
      flavor: "Debug",
      build_type: "Alpha",
      properties: {
          "android.injected.signing.store.file" => ENV["RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"],
          "android.injected.signing.store.password" => ENV["RADIX_ANDROID_KEYSTORE_PASSWORD"],
          "android.injected.signing.key.alias" => ENV["RADIX_ANDROID_KEYSTORE_ALIAS"],
          "android.injected.signing.key.password" => ENV["RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"]
        }
      )
  firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      release_notes: ENV["RELEASE_NOTES"],
      groups: ENV["GROUPS"]
  )

end

desc "Deploy pre-releases"
lane :preview do

    bump_build_number
    gradle(
        task: "assemble",
        flavor: "Debug",
        build_type: "Preview",
        properties: {
            "android.injected.signing.store.file" => ENV["RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"],
            "android.injected.signing.store.password" => ENV["RADIX_ANDROID_KEYSTORE_PASSWORD"],
            "android.injected.signing.key.alias" => ENV["RADIX_ANDROID_KEYSTORE_ALIAS"],
            "android.injected.signing.key.password" => ENV["RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"]
          }
        )
    firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        release_notes: ENV["RELEASE_NOTES"],
        groups: ENV["GROUPS"]
    )
    build_number_to_commit = File.read("../versioning/BUILD_NUMBER")
    version_name = android_get_version_name
    git_commit(
        path: "./versioning/BUILD_NUMBER",
        message: "Version #{version_name} (#{build_number_to_commit}) distributed to Firebase"
    )
    push_to_git_remote(
        remote_branch: ENV["RELEASE_BRANCH"],
        tags: false
    )
end


desc "Deploy to Google Play Console"
lane :release_to_google_play do

    bump_build_number
    gradle(
        task: "bundle",
        build_type: "debugPreview",
        properties: {
            "android.injected.signing.store.file" => ENV["RADIX_DEBUG_PREVIEW_KEYSTORE_FILE"],
            "android.injected.signing.store.password" => ENV["RADIX_ANDROID_KEYSTORE_PASSWORD"],
            "android.injected.signing.key.alias" => ENV["RADIX_ANDROID_KEYSTORE_ALIAS"],
            "android.injected.signing.key.password" => ENV["RADIX_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD"]
          }
        )

    upload_to_play_store(
        ##package_name: "???",
        track: "internal",
        aab: Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
        skip_upload_apk: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        json_key_data: ENV["GOOGLE_PLAY_PREVIEW_DEPLOYER_JSON"],
        mapping: mapping_file_exists() ? Actions.lane_context[SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH] : nil
        )
end


# after_all do |beta|
#   slack(
#     message: "New Android version of Babylon Wallet is released!",
#     slack_url: ENV["SLACK_URL"],
#     use_webhook_configured_username_and_icon: "false",
#     username: "fastlane",
#     icon_url: "https://fastlane.tools/assets/img/fastlane_icon.png",
#     success: true
# )
# end

# error do |beta, exception|
#   slack(
#     message: exception.message,
#     success: false
#   )
# end

lane :bump_build_number do

    current_build_number = File.read("../versioning/BUILD_NUMBER").to_i
    new_build_number = current_build_number + 1
    File.write("../versioning/BUILD_NUMBER", new_build_number, mode:"w")

    android_set_version_code(
        version_code: File.read("../versioning/BUILD_NUMBER"), # optional, if not specified, Version Code will be incremented
        gradle_file: "app/build.gradle"
    )

end